Det går att använda två sätt att jämföra strängar -
1) alfabetisk - alfabetiskt ordning.

2) genom lokal känslighet (local sensitivity) - java använder språkinställningarna i datorn som exekverar koden.

Collator col = Collator.getInstance();
col.setStrength(Collator.PRIMARY);

String s1 = "a";
String s2 = "b";

Locale.setDefault(Locale.of("sv", "SE"));
col.compare(s1,s1); // jämför med lokal känslighet enligt svensk språkinställning

s1.compareTo(s2) // jämför alfabetiskt utan känslighet för lokala språkinställningar

--------------------

Man kan även ställa in lokal känslighet som argument i String.format.

String.format(Locale.of("sv", "SE"), "%.2f", costPerMonth); // Kommer använda svensk standard för decimaltecken.


-------------------

Randomisering i Java

Math.random() // genererar ett flyttal mellan 0.00 och 1.00
(int) (Math.random()*100) // genererar en integer mellan 0 och 100 - notera parenteserna.
Math.random är inte kryptografiskt säker.

Random rand = new Random();
rand.nextInt(100); genererar en integer mellan 0 och 100.
Bättre kryptografisk säkerhet


-------------------

Switch uttryck kan numera förenklas med -> syntaxen. Pilen ersätter kolon : och det blir implicit ett break efter uttrycket
eller kodblocket efter den.

int num = 3;
int res;

switch (num) {
    case 0 -> res = 0;
    case 1 -> res = 1;
    case 2 -> res = 2;
    case 3 -> res = 3;
    default -> { System.out.println("Någonting gick fel");
                throw new IllegalArgumentException();
               }
}

--------------

För jämförelse av double tal så bör inte == användas direkt.

Istället så räknar man ut differensen mellan talen och jämför differensen med epsilon, dvs den godtagbara avvikelsen.

double a = 10.0
double b = 9.9999999999 // felmarginal på 10^-10

double epsilon = 0.000000001 // godtagbar avvikelse 10^-9;
double diffAB = Math.abs(a-b); // generar 10^-10 (dvs 0.0000000001)

boolean isEqual = diffAb < epsilon // 0.0000000001 < 0.000000001 - epsilon är ett decimalsteg större, dvs differensen har inte överskridit epsilons gräns för försumbar differens.

Det går även att använda Double.compare(double a, double b) == 0. Default epsilon för denna metod är 10^-15

boolean isEqual = Double.compare(a,b) // true eftersom felmarginal är på 10^-10 och epsilon är 10^-15.

-------------
