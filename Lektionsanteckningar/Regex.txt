Cheat sheet för Regex:

(?i)[a-z] - letter case insensitive

\\d{1} or  \\d - one digit

[a-z]? - optional alphabetic character

.*hej.* - finds words in string even if word is part of other word

.*(hej|du|kan).* - find one of words in string even if word is part of other word

[a-z\d_]{4,16} - validate username case-insensitive, alphabetic characters, digits, or underscore. 4-16 characters long

\\b!+ - find exclamation marks after a word (even if words contains them)

!+\\b - find exclamation marks before and inside a word up until end of word.

\\d{4}|\\d{6} - validate pin code 4 or 6 digits

^(.+)(\\1)+$ - see if capture group one (\\1) captured from any charsequence (.+) occurs in a pattern to the end of the string
--------
Matcherklassen kan användas för att hitta index och ersätta med annat i en sträng.

String = "test in action";
Pattern pattern = Pattern.compile("[aeiou]");
Matcher matcher = pattern.matcher(s);

int index;
System.out.println("Vowels index:");
while (matcher.find()) {
    index = matcher.start();
    System.out.println(index);
}

StringBuilder sb = new StringBuilder();
int index;
System.out.println("Replacing vowels with their index in string");
while (matcher.find()) {
    index = matcher.start();
    matcher.appendReplacement(sb, ""+index);
}
matcher.appendTail(sb); // appends rest of string that didnt get handled in replacement appending.

--------------
Example of look behind and look ahead in regex.

Pattern.compile("(?<=password=)(.*?)(?=&|$)"); -

?<=  // look behind - in this case it matches the characters behind "password="
?=  // look ahead - in this case it matches the characters ahead up until it hits a & character or $ meaning end of string.